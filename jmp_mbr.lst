     1                                  read_disk_start equ 100 
     2                                  
     3 00000000 B8C007                  mov ax, 0x07c0
     4 00000003 8ED8                    mov ds, ax
     5                                  
     6                                  ;输入：DI:SI=起始逻辑扇区号
     7 00000005 31FF                    xor di, di
     8 00000007 BE6400                  mov si, read_disk_start
     9                                  
    10                                  ;输出：ES:BX=目标缓冲区地址
    11 0000000A A1[4A00]                mov ax, [mem_cs]
    12 0000000D 8B16[4C00]              mov dx, [mem_ip]
    13                                  
    14 00000011 8EC0                    mov es, ax
    15 00000013 89D3                    mov bx, dx
    16 00000015 E80500                  call read_hard_disk_0
    17                                  
    18                                  ; jmp far [mem_cs]
    19 00000018 EA00000010              jmp 0x1000:0
    20                                  
    21                                  read_hard_disk_0:
    22 0000001D B001                        mov al, 1		;读取/写入的扇区数目
    23 0000001F B500                        mov ch, 0		;磁道号
    24 00000021 B126                        mov cl, 38		;（起始）扇区号
    25 00000023 B601                        mov dh, 1		;磁头号（对于软盘来说就是面号，因为一个面用一个磁头来读写）
    26 00000025 B280                        mov dl, 0x80		;驱动器号：	软驱从 0 开始：  0，软驱 A ； 1，软驱 B。
    27                                                                  ; 硬盘从 80h 开始：  80h，硬盘 C ； 81h，硬盘 D 。
    28 00000027 B402                        mov ah, 0x2		;int 13h 的功能号（常用的：2 表示读扇区；3 表示写扇区）
    29                                  
    30 00000029 CD13                        int 0x13
    31 0000002B 7308                        jnc loadSuccess
    32                                   
    33 0000002D BE[5300]                    mov si, string_error
    34 00000030 E80900                      call putc
    35 00000033 EB06                        jmp load_end
    36                                   
    37                                  loadSuccess:
    38 00000035 BE[6000]                    mov si, string_success
    39 00000038 E80100                      call putc
    40                                  
    41                                  load_end:
    42 0000003B C3                          ret
    43                                  
    44                                  putc:
    45 0000003C B40E                        mov ah, 0x0e
    46 0000003E 8A04                        mov al, [si]
    47 00000040 84C0                        test al, al
    48 00000042 7405                        je return
    49 00000044 CD10                        int 0x10
    50 00000046 46                          inc si
    51 00000047 EBF3                        jmp putc
    52                                  return:
    53 00000049 C3                          ret
    54                                  
    55 0000004A 0010                    mem_cs   dw 0x1000
    56 0000004C 0000                    mem_ip   dw 0x0
    57 0000004E 6F6B0D0A00              string_ok: db 'ok',0x0d,0x0a, 0
    58 00000053 72656164206572726F-     string_error: db 'read error', 0x0d, 0x0a, 0
    58 0000005C 720D0A00           
    59 00000060 726561642073756363-     string_success: db 'read success', 0x0d, 0x0a, 0
    59 00000069 6573730D0A00       
    60 0000006F 70726F677265737320-     string_end: db 'progress end', 0x0d, 0x0a, 0
    60 00000078 656E640D0A00       
    61                                  
    62 0000007E 00<rept>                times 510-($-$$) db 0
    63 000001FE 55AA                                     db 0x55,0xaa
